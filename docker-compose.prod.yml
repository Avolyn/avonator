version: '3.8'

services:
  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: guardrails-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Main FastAPI application
  guardrails-api:
    build:
      context: .
      target: production
    container_name: guardrails-api-prod
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - GUARDRAILS_API_KEY=${GUARDRAILS_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - DEBUG=False
      - LOG_LEVEL=INFO
      - ENABLE_CORS=True
      - SPACY_MODEL=en_core_web_sm
      - HUGGINGFACE_MODEL=unitary/toxic-bert
      - CACHE_DEFAULT_TTL=300
      - RATE_LIMIT_REQUESTS=1000
      - RATE_LIMIT_WINDOW=60
      - WORKERS=4
    volumes:
      - model_cache:/app/models
      - logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/guardrails/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: always
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: guardrails-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: guardrails-grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: guardrails-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - logs:/var/log/nginx
    depends_on:
      - guardrails-api
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: guardrails-loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: always

  # Log collection
  promtail:
    image: grafana/promtail:latest
    container_name: guardrails-promtail
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - logs:/var/log
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: always

volumes:
  redis_data:
  model_cache:
  prometheus_data:
  grafana_data:
  loki_data:
  logs:

networks:
  default:
    driver: bridge
