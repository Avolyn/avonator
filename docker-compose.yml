version: '3.8'

services:
  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: guardrails-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Main FastAPI application
  guardrails-api:
    build:
      context: .
      target: development
    container_name: guardrails-api
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - GUARDRAILS_API_KEY=dev-api-key-change-in-production
      - DEBUG=True
      - LOG_LEVEL=INFO
      - ENABLE_CORS=True
      - SPACY_MODEL=en_core_web_sm
      - HUGGINGFACE_MODEL=unitary/toxic-bert
      - CACHE_DEFAULT_TTL=300
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
    volumes:
      - ./:/app
      - model_cache:/app/models
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/guardrails/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - guardrails-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: guardrails-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - guardrails-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: guardrails-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - guardrails-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: guardrails-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - guardrails-api
    restart: unless-stopped
    networks:
      - guardrails-network

volumes:
  redis_data:
  model_cache:
  prometheus_data:
  grafana_data:

networks:
  guardrails-network:
    driver: bridge